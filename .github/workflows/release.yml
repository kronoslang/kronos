on:
  push:
    tags:
      - '*'

jobs:
  build:
    runs-on: ${{ matrix.os }}
    name: ${{ matrix.name }}
    strategy:
      matrix:
        include:
          - name: Linux-x64
            os: ubuntu-latest
          - name: macOS
            os: macos-latest
          - name: Windows-x64
            os: windows-latest
    
    env:
      LLVM_PATH: ${{ github.workspace }}/llvm
      ARCHIVE_NAME: kronos-${{ matrix.name }}.zip
    
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Deps (Linux)
        if: runner.os == 'Linux'
        run: sudo apt-get install g++ python2 cmake libjack-dev libsndfile-dev libreadline-dev libcurl4-openssl-dev
      
      - name: Deps (macOS)
        if: runner.os == 'macOS'
        run: brew install cmake subversion
      
      - name: Deps (Windows)
        if: runner.os == 'Windows'
        uses: crazy-max/ghaction-chocolatey@v2
        with:
          args: install cmake svn

      - name: Checkout LLVM
        uses: actions/checkout@v3
        with:
          repository: llvm/llvm-project
          path: ${{ env.LLVM_PATH }}
          ref: llvmorg-6.0.1
      
      - name: Build LLVM (Linux and Windows)
        if: runner.os != 'macOS' 
        shell: bash
        working-directory: ${{ env.LLVM_PATH }}
        run: cd llvm && mkdir build && cd build && cmake -DCMAKE_BUILD_TYPE=Release -DLLVM_BUILD_EXAMPLES=False -DLLVM_BUILD_TOOLS=False -DLLVM_TARGETS_TO_BUILD=host .. && cmake --build . --config "Release" -j $(nproc)
      
      - name: Build LLVM (macOS)
        if: runner.os == 'macOS' 
        shell: bash
        working-directory: ${{ env.LLVM_PATH }}
        run: cd llvm && mkdir build && cd build && cmake -DCMAKE_BUILD_TYPE=Release -DLLVM_BUILD_EXAMPLES=False -DLLVM_BUILD_TOOLS=False -DLLVM_TARGETS_TO_BUILD=host .. && cmake --build . --config "Release"
      
      - name: Build Kronos (Linux and Windows)
        if: runner.os != 'macOS' 
        shell: bash
        working-directory: ${{ github.workspace }}
        run: mkdir build && cd build && cmake -DCMAKE_BUILD_TYPE=Release -DLLVM_DIR=$LLVM_PATH/llvm/build/lib/cmake/llvm/ .. && cmake --build . --config "Release" -j $(nproc)

      - name: Build Kronos (macOS)
        if: runner.os == 'macOS' 
        shell: bash
        working-directory: ${{ github.workspace }}
        run: mkdir build && cd build && cmake -DCMAKE_BUILD_TYPE=Release -DLLVM_DIR=$LLVM_PATH/llvm/build/lib/cmake/llvm/ .. && cmake --build . --config "Release"
      
      - name: Package files
        shell: bash
        working-directory: ${{ github.workspace }}
        run: bash package_build.sh
        
      - name: Zip files (Unix)
        if: runner.os != 'Windows'
        shell: bash
        working-directory: ${{ github.workspace }}
        run: zip --symlinks -r "$ARCHIVE_NAME" "kronos"
      
      - name: Zip files (Windows)
        if: runner.os == 'Windows'
        shell: bash
        working-directory: ${{ github.workspace }}
        run: 7z a "$ARCHIVE_NAME" -tzip "kronos"
      
      - name: Upload binaries
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ github.workspace }}/${{ env.ARCHIVE_NAME }}
          prerelease: true
          body: ""
          tag: ${{ github.ref }}
